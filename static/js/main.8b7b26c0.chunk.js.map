{"version":3,"sources":["components/Header/Header.jsx","components/Calendar/Calendar.jsx","components/App/App.js","index.js"],"names":["DivWrapper","styled","div","TextWrapper","span","TextContainer","ButtonWrapper","button","Header","today","nextHandler","prevHandler","onClick","format","GridWrapper","CellWrapper","props","isHeader","isSelectedMounth","DayWrapper","Calendar","startDay","day","clone","subtract","daysArray","Array","map","add","isSame","_","i","moment","toUpperCase","dayItem","App","window","useState","setToday","startOf","console","log","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAGMA,EAAaC,IAAOC,IAAV,0RAeVC,EAAcF,IAAOG,KAAV,0GAKXC,EAAgBJ,IAAOC,IAAV,0GAMbI,EAAgBL,IAAOM,OAAV,gOAebC,EAAS,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAClC,OACI,eAACX,EAAD,WACI,8BACI,cAACM,EAAD,CAAeM,QAASD,EAAxB,iBAEJ,eAACN,EAAD,WACI,cAACF,EAAD,UAAeM,EAAMI,OAAO,SAC5B,cAACV,EAAD,UAAeM,EAAMI,OAAO,aAEhC,8BACI,cAACP,EAAD,CAAeM,QAASF,EAAxB,qB,QCnDVI,EAAcb,IAAOC,IAAV,uOAYXa,EAAcd,IAAOC,IAAV,wOAEC,SAAAc,GAAK,OAAIA,EAAMC,SAAW,GAAK,MAG1B,SAAAD,GAAK,OAAIA,EAAMC,SAAW,SAAW,cACzC,SAAAD,GAAK,OAAIA,EAAMC,SAAW,SAAW,cAEvC,SAAAD,GAAK,OAAIA,EAAMC,SAAW,GAAK,MAC1C,SAAAD,GAAK,OAAIA,EAAMC,SAAW,oBAAsB,MAEzC,SAAAD,GAAK,OAAIA,EAAME,iBAAmB,QAAU,WAEnDC,EAAalB,IAAOC,IAAV,8CAIVkB,EAAW,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUZ,EAAY,EAAZA,MAEpBa,EAAMD,EAASE,QAAQC,SAAS,EAAG,OACnCC,EAAY,YAAIC,MAFJ,KAEsBC,KAAI,kBAAML,EAAIM,IAAI,EAAG,OAAOL,WAC9DL,EAAmB,SAACI,GAAD,OAASb,EAAMoB,OAAOP,EAAK,UACpD,OACI,eAACR,EAAD,WAEQ,YAAIY,MAAM,IAAIC,KAAI,SAACG,EAAGC,GAAJ,OAAU,cAAChB,EAAD,CAAoBE,UAAQ,EAACC,kBAAgB,EAA7C,SAAgDc,MAASV,IAAIS,GAAGlB,OAAO,OAAQoB,eAA7DH,MAG9CL,EAAUE,KAAI,SAACO,GACX,OACI,cAACnB,EAAD,CAAaG,iBAAmBA,EAAiBgB,GAAjD,SACI,cAACf,EAAD,UACKe,EAAQrB,OAAO,QAFuCqB,EAAQrB,OAAO,oBCfvFsB,MA1Bf,WACCC,OAAOJ,OAASA,MADF,MAGYK,mBAASL,OAHrB,mBAGPvB,EAHO,KAGA6B,EAHA,KAINjB,EAAWZ,EAAMc,QAAQgB,QAAQ,SAASA,QAAQ,QAUxD,OACA,gCACC,cAAC,EAAD,CACC9B,MAAOA,EACPE,YAZgB,WACnB6B,QAAQC,IAAI,QACZH,GAAS,SAAAI,GAAI,OAAIA,EAAKnB,QAAQC,SAAS,EAAG,aAWvCd,YATgB,WACnB8B,QAAQC,IAAI,QACZH,GAAS,SAAAI,GAAI,OAAIA,EAAKnB,QAAQK,IAAI,EAAG,eASnC,cAAC,EAAD,CAAUP,SAAUA,EAAUZ,MAAOA,QCrBzCkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8b7b26c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst DivWrapper = styled.div`\r\n    max-width: 572px;\r\n    height: 50px;\r\n    margin: 0 auto;\r\n\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    color: black;\r\n    backgrounf-color: white;\r\n    border: 2px solid black;\r\n    border-bottom: 0px;\r\n`;\r\n\r\nconst TextWrapper = styled.span`\r\n    font-size: 35px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n`;\r\nconst TextContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    width: 160px;\r\n`;\r\nconst ButtonWrapper = styled.button`\r\n    margin: 10px;\r\n    width: 40px;\r\n    height: 40px;\r\n\r\n    border: none;\r\n    outline: none;\r\n\r\n    color: white;\r\n    background-color: black;\r\n\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n`;\r\nconst Header = ({ today, nextHandler, prevHandler }) => {\r\n    return (\r\n        <DivWrapper>\r\n            <div>\r\n                <ButtonWrapper onClick={prevHandler}>&lt;</ButtonWrapper>\r\n            </div>\r\n            <TextContainer>\r\n                <TextWrapper>{ today.format('MMM') }</TextWrapper>\r\n                <TextWrapper>{ today.format('YYYY') }</TextWrapper>\r\n            </TextContainer>\r\n            <div>\r\n                <ButtonWrapper onClick={nextHandler}>&gt;</ButtonWrapper>\r\n            </div>\r\n        </DivWrapper>\r\n    )\r\n}\r\n\r\nexport { Header };","import moment from 'moment';\r\nimport React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst GridWrapper = styled.div`\r\n    max-width: 572px;\r\n    max-height: 520px;\r\n    margin: auto;\r\n    padding: 2px;\r\n\r\n    display: grid;\r\n    grid-template-columns: repeat(7, 1fr);\r\n    grid-gap: 2px;\r\n\r\n    background-color: black;\r\n`;\r\nconst CellWrapper = styled.div`\r\n    min-width: 80px;\r\n    min-height: ${props => props.isHeader ? 20 : 55}px;\r\n    \r\n    display: flex;\r\n    justify-content: ${props => props.isHeader ? 'center' : 'flex-end'};\r\n    align-items: ${props => props.isHeader ? 'center' : 'flex-end'};\r\n\r\n    font-size: ${props => props.isHeader ? 15 : 20}px;\r\n    ${props => props.isHeader ? 'font-weight: bold' : ''};\r\n    background-color: white;\r\n    color: ${props => props.isSelectedMounth ? 'black' : 'white'};\r\n`;\r\nconst DayWrapper = styled.div`\r\n    margin: 1px;\r\n`;\r\n\r\nconst Calendar = ({ startDay, today }) => {\r\n    const totalDays = 42;\r\n    const day = startDay.clone().subtract(1, 'day');\r\n    const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\r\n    const isSelectedMounth = (day) => today.isSame(day, 'month');\r\n    return (\r\n        <GridWrapper>\r\n            {\r\n                [...Array(7)].map((_, i) => <CellWrapper key={_}isHeader isSelectedMounth>{(moment().day(i).format('ddd')).toUpperCase()}</CellWrapper>)\r\n            }\r\n            {\r\n                daysArray.map((dayItem) => {\r\n                    return (\r\n                        <CellWrapper isSelectedMounth={ isSelectedMounth(dayItem)}key={dayItem.format('DDMMYYYY')}>\r\n                            <DayWrapper>\r\n                                {dayItem.format('D')}\r\n                            </DayWrapper>\r\n                        </CellWrapper>\r\n                    )\r\n                })\r\n            }\r\n        </GridWrapper>\r\n    )\r\n}\r\n\r\nexport { Calendar };","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { Header } from '../Header/Header';\nimport { Calendar } from '../Calendar/Calendar';\n\nfunction App() {\n\twindow.moment = moment();\n\t// const today = moment();\n\tconst [today, setToday] = useState(moment());\n  \tconst startDay = today.clone().startOf('month').startOf('week');\n\n\tconst prevHandler = () => {\n\t\tconsole.log('prev')\n\t\tsetToday(prev => prev.clone().subtract(1, 'month'))\n\t}\n\tconst nextHandler = () => {\n\t\tconsole.log('next')\n\t\tsetToday(prev => prev.clone().add(1, 'month'))\n\t};\n  \treturn (\n\t\t\t<div>\n\t\t\t\t<Header\n\t\t\t\t\ttoday={today}\n\t\t\t\t\tprevHandler={prevHandler}\n\t\t\t\t\tnextHandler={nextHandler}\n\t\t\t\t/>\n\t\t\t\t<Calendar startDay={startDay} today={today} />\n\t\t\t</div>\n\t\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}